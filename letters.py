"""
Sieć o 225 neuronach jest trenowana na 4 wzorcach, są to litery F, H, O i X.
Każdy z wzorców to wektor o 225 elementach z przekształconych macierzy 15x15.
Sieć jest testowana na 16 danych wejściowych, są to coraz bardziej zaszumione wzorce.
Przy wiekszym zaszumieniu (70 i 100 podmian) sieć miewa przypadki zatrzymywania się
w innych momentach niż osiąganie wzorców.
Zwykle jest to jakaś mieszanka wzorców, a bardzo rzadko wzorzec odwrotny.
"""
import matplotlib.pyplot as plt
import numpy as np
import hopfieldHeader

F = np.array([
  [-1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1, -1],
  [-1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1, -1],
  [-1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1, -1],
  [-1, -1, -1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  [-1, -1, -1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  [-1, -1, -1,  1,  1,  1,  1,  1,  1,  1, -1, -1, -1, -1, -1],
  [-1, -1, -1,  1,  1,  1,  1,  1,  1,  1, -1, -1, -1, -1, -1],
  [-1, -1, -1,  1,  1,  1,  1,  1,  1,  1, -1, -1, -1, -1, -1],
  [-1, -1, -1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  [-1, -1, -1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  [-1, -1, -1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  [-1, -1, -1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  [-1, -1, -1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  [-1, -1, -1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  [-1, -1, -1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
])
H = np.array([
  [-1, -1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1],
  [-1, -1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1],
  [-1, -1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1],
  [-1, -1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1],
  [-1, -1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1],
  [-1, -1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1],
  [-1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1],
  [-1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1],
  [-1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1],
  [-1, -1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1],
  [-1, -1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1],
  [-1, -1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1],
  [-1, -1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1],
  [-1, -1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1],
  [-1, -1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1],
])
O = np.array([
  [-1, -1, -1, -1, -1,  1,  1,  1,  1,  1, -1, -1, -1, -1, -1],
  [-1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1, -1, -1, -1, -1],
  [-1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1, -1],
  [-1, -1,  1,  1,  1,  1, -1, -1, -1,  1,  1,  1,  1, -1, -1],
  [-1, -1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1],
  [-1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1, -1],
  [-1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1, -1],
  [-1,  1,  1,  1, -1 ,-1, -1, -1, -1, -1, -1,  1,  1,  1, -1],
  [-1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1, -1],
  [-1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1, -1],
  [-1, -1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1,  1,  1, -1],
  [-1, -1,  1,  1,  1,  1, -1, -1, -1,  1,  1,  1,  1, -1, -1],
  [-1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1, -1],
  [-1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1, -1, -1, -1, -1],
  [-1, -1, -1, -1, -1,  1,  1,  1,  1,  1, -1, -1, -1, -1, -1]
])
X = np.array([
  [-1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1, -1],
  [-1,  1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1,  1,  1, -1],
  [-1, -1,  1,  1,  1,  1, -1, -1, -1,  1,  1,  1,  1, -1, -1],
  [-1, -1, -1,  1,  1,  1, -1, -1, -1,  1,  1,  1, -1, -1, -1],
  [-1, -1, -1, -1,  1,  1,  1, -1,  1,  1,  1,  1, -1, -1, -1],
  [-1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1, -1, -1, -1, -1],
  [-1, -1, -1, -1, -1,  1,  1,  1,  1,  1, -1, -1, -1, -1, -1],
  [-1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1, -1, -1, -1, -1],
  [-1, -1, -1, -1, -1,  1,  1,  1,  1,  1, -1, -1, -1, -1, -1],
  [-1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1, -1, -1, -1, -1],
  [-1, -1, -1, -1,  1,  1,  1, -1,  1,  1,  1,  1, -1, -1, -1],
  [-1, -1, -1,  1,  1,  1, -1, -1, -1,  1,  1,  1, -1, -1, -1],
  [-1, -1,  1,  1,  1,  1, -1, -1, -1,  1,  1,  1,  1, -1, -1],
  [-1,  1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1,  1,  1, -1],
  [-1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1, -1]
])

F = F.reshape(-1)
O = O.reshape(-1)
H = H.reshape(-1)
X = X.reshape(-1)


lettersPatterns = [F, O, H, X]
lettersNet = hopfieldHeader.hopfieldNet(225)
lettersNet.learn(lettersPatterns)
lettersNet.plotWeights("lettersWeights.png")
lettersNet.plotPatterns(15,"lettersPattern")

noisedData = [
  hopfieldHeader.noise(F, 10),
  hopfieldHeader.noise(O, 10),
  hopfieldHeader.noise(H, 10),
  hopfieldHeader.noise(X, 10),
  hopfieldHeader.noise(F, 40),
  hopfieldHeader.noise(O, 40),
  hopfieldHeader.noise(H, 40),
  hopfieldHeader.noise(X, 40),
  hopfieldHeader.noise(F, 70),
  hopfieldHeader.noise(O, 70),
  hopfieldHeader.noise(H, 70),
  hopfieldHeader.noise(X, 70),
  hopfieldHeader.noise(F, 100),
  hopfieldHeader.noise(O, 100),
  hopfieldHeader.noise(H, 100),
  hopfieldHeader.noise(X, 100)
]
for i in range(len(noisedData)):
  plt.imshow(noisedData[i].reshape(15, 15))
  plt.savefig(f'lettersNoised{i+1}.png')
  #plt.show()

  result = lettersNet.test(noisedData[i])
  plt.imshow(result.reshape(15, 15))
  plt.savefig(f'lettersResult{i+1}.png')
  #plt.show()
